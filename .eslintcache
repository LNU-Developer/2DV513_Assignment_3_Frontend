[{"/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/App.tsx":"1","/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/reportWebVitals.ts":"2","/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/components/patients/AddPatientModal.tsx":"3","/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/components/layout/AddButton.tsx":"4","/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/index.tsx":"5","/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/components/patients/PatientList.tsx":"6"},{"size":647,"mtime":1607555833326,"results":"7","hashOfConfig":"8"},{"size":425,"mtime":1606942838114,"results":"9","hashOfConfig":"8"},{"size":5480,"mtime":1609075504765,"results":"10","hashOfConfig":"8"},{"size":741,"mtime":1607464680826,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1607450936386,"results":"12","hashOfConfig":"8"},{"size":1570,"mtime":1609077727487,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mst5qj",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/App.tsx",[],"/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/reportWebVitals.ts",[],"/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/components/patients/AddPatientModal.tsx",["28","29"],"import React, {useState} from 'react'\n\nconst AddPatientModal = () => {\n    const [FirstName, setFirstName] = useState('')\n    const [LastName, setLastName] = useState('')\n    const [SocialSecurityNumber, setSSN] = useState('')\n    const [PhoneNo, setPhone] = useState(\"\")\n    const [Adress, setAddress] = useState(\"\")\n    const [PostalNo, setPostalNo] = useState(\"\")\n    const [City, setCity] = useState(\"\")\n    const [Email, setEmail] = useState(\"\")\n    const [ProofOfIdentification, setProofOfIdentification] = useState(true)\n    const [IdentificationType, setIdentificationType] = useState('')\n    const [CreatedBy, setCreatedBy] = useState(null)\n\n    const submit = async (e:any) => {\n        e.preventDefault()\n        try {\n            const body = {FirstName, LastName, SocialSecurityNumber, PhoneNo, Adress, PostalNo, City, Email, ProofOfIdentification, IdentificationType, CreatedBy}\n            const response = await fetch(process.env.REACT_APP_API_URL+\"/patient/add\", {\n                method: \"POST\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify(body)\n            })\n            console.log(response)\n        } catch (error) {\n            console.log(error);\n        }\n\n    // if (firstName === \"\" || lastName === \"\" || ssn === \"\") {\n    //   M.toast({ html: \"Please enter a firstname, lastname and social security number\" });\n    // } else {\n    //   console.log(firstName, lastName);\n    //   // Clear fields\n    //   setFirstName(\"\");\n    //   setLastName(\"\");\n    //   setSSN(\"\");\n    // }\n  };\n\n  return (\n    <div id=\"add-patient-modal\" className=\"modal\">\n      <div className=\"modal-content\">\n        <h4>New Patient</h4>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"firstName\"\n              value={FirstName}\n              onChange={(e) => setFirstName(e.target.value)}\n            />\n            <label htmlFor=\"firstName\" className=\"active\">\n              First Name\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"lastName\"\n              value={LastName}\n              onChange={(e) => setLastName(e.target.value)}\n            />\n            <label htmlFor=\"lastName\" className=\"active\">\n              Last Name\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              value={Email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <label htmlFor=\"email\" className=\"active\">\n              Email\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"ssn\"\n              value={SocialSecurityNumber}\n              onChange={(e) => setSSN(e.target.value)}\n            />\n            <label htmlFor=\"SocialSecurityNumber\" className=\"active\">\n              Social Security Number\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"phone\"\n              value={PhoneNo}\n              onChange={(e) => setPhone(e.target.value)}\n            />\n            <label htmlFor=\"phone\" className=\"active\">\n              Phone Number\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"adress\"\n              value={Adress}\n              onChange={(e) => setAddress(e.target.value)}\n            />\n            <label htmlFor=\"adress\" className=\"active\">\n              Adress\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"postalNo\"\n              value={PostalNo}\n              onChange={(e) => setPostalNo(e.target.value)}\n            />\n            <label htmlFor=\"postalNo\" className=\"active\">\n              Postal Number\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"city\"\n              value={City}\n              onChange={(e) => setCity(e.target.value)}\n            />\n            <label htmlFor=\"city\" className=\"active\">\n              City\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field\">\n            <input\n              type=\"text\"\n              name=\"identificationType\"\n              value={IdentificationType}\n              onChange={(e) => setIdentificationType(e.target.value)}\n            />\n            <label htmlFor=\"identificationType\" className=\"active\">\n              Identification Type\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"modal-footer\">\n        <a\n          href=\"#!\"\n          onClick={submit}\n          className=\"modal-close waves-effect blue waves-light btn\"\n        >\n          Enter\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default AddPatientModal","/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/components/layout/AddButton.tsx",["30"],"import React from \"react\";\n\nconst AddButton = () => {\n  return (\n    <div className=\"fixed-action-btn\">\n      <a\n        href=\"#\"\n        className=\"btn-floating btn-large blue darken-2 modal-trigger\"\n      >\n        <i className=\"large material-icons\">add</i>\n      </a>\n      <ul>\n        <li>\n          <a\n            href=\"#add-journal-modal\"\n            className=\"btn-floating green modal-trigger\"\n          >\n            <i className=\"material-icons\">assignment</i>\n          </a>\n        </li>\n        <li>\n          <a href=\"#add-patient-modal\" className=\"btn-floating red modal-trigger\">\n            <i className=\"material-icons\">person_add</i>\n          </a>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default AddButton;","/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/index.tsx",[],"/Users/demir/Desktop/School/LNU/2dv513/assignment3/journal-app/src/components/patients/PatientList.tsx",["31"],{"ruleId":"32","severity":1,"message":"33","line":12,"column":35,"nodeType":"34","messageId":"35","endLine":12,"endColumn":59},{"ruleId":"32","severity":1,"message":"36","line":14,"column":23,"nodeType":"34","messageId":"35","endLine":14,"endColumn":35},{"ruleId":"37","severity":1,"message":"38","line":6,"column":7,"nodeType":"39","endLine":9,"endColumn":8},{"ruleId":"32","severity":1,"message":"40","line":8,"column":19,"nodeType":"34","messageId":"35","endLine":8,"endColumn":32},"@typescript-eslint/no-unused-vars","'setProofOfIdentification' is assigned a value but never used.","Identifier","unusedVar","'setCreatedBy' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'deletePatient' is assigned a value but never used."]